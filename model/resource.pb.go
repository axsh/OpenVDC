// Code generated by protoc-gen-go. DO NOT EDIT.
// source: resource.proto

package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Resource struct {
	Total       int64   `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Available   int64   `protobuf:"varint,2,opt,name=available" json:"available,omitempty"`
	UsedPercent float64 `protobuf:"fixed64,3,opt,name=used_percent" json:"used_percent,omitempty"`
}

func (m *Resource) Reset()                    { *m = Resource{} }
func (m *Resource) String() string            { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()               {}
func (*Resource) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Resource) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Resource) GetAvailable() int64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *Resource) GetUsedPercent() float64 {
	if m != nil {
		return m.UsedPercent
	}
	return 0
}

type LoadAvg struct {
	Load1  float32 `protobuf:"fixed32,1,opt,name=load1" json:"load1,omitempty"`
	Load5  float32 `protobuf:"fixed32,2,opt,name=load5" json:"load5,omitempty"`
	Load15 float32 `protobuf:"fixed32,3,opt,name=load15" json:"load15,omitempty"`
}

func (m *LoadAvg) Reset()                    { *m = LoadAvg{} }
func (m *LoadAvg) String() string            { return proto.CompactTextString(m) }
func (*LoadAvg) ProtoMessage()               {}
func (*LoadAvg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *LoadAvg) GetLoad1() float32 {
	if m != nil {
		return m.Load1
	}
	return 0
}

func (m *LoadAvg) GetLoad5() float32 {
	if m != nil {
		return m.Load5
	}
	return 0
}

func (m *LoadAvg) GetLoad15() float32 {
	if m != nil {
		return m.Load15
	}
	return 0
}

type ComputingResources struct {
	Cpu     *Resource   `protobuf:"bytes,1,opt,name=cpu" json:"cpu,omitempty"`
	Memory  *Resource   `protobuf:"bytes,2,opt,name=memory" json:"memory,omitempty"`
	Storage []*Resource `protobuf:"bytes,3,rep,name=storage,json=disk" json:"storage,omitempty"`
	Load    *LoadAvg    `protobuf:"bytes,4,opt,name=load" json:"load,omitempty"`
}

func (m *ComputingResources) Reset()                    { *m = ComputingResources{} }
func (m *ComputingResources) String() string            { return proto.CompactTextString(m) }
func (*ComputingResources) ProtoMessage()               {}
func (*ComputingResources) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *ComputingResources) GetCpu() *Resource {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *ComputingResources) GetMemory() *Resource {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *ComputingResources) GetStorage() []*Resource {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *ComputingResources) GetLoad() *LoadAvg {
	if m != nil {
		return m.Load
	}
	return nil
}

func init() {
	proto.RegisterType((*Resource)(nil), "model.Resource")
	proto.RegisterType((*LoadAvg)(nil), "model.LoadAvg")
	proto.RegisterType((*ComputingResources)(nil), "model.ComputingResources")
}

func init() { proto.RegisterFile("resource.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x4f, 0x4b, 0xc4, 0x30,
	0x14, 0xc4, 0xe9, 0x9f, 0xed, 0xea, 0x53, 0x56, 0x08, 0x22, 0x3d, 0x28, 0xd6, 0x1e, 0x74, 0x4f,
	0x2d, 0x2a, 0xfd, 0x00, 0xea, 0x55, 0x2f, 0x39, 0x7a, 0x91, 0xb4, 0x09, 0xdd, 0x62, 0xdb, 0x57,
	0x92, 0xb4, 0xe8, 0x77, 0xf2, 0x43, 0x4a, 0xdf, 0xa6, 0x88, 0xb0, 0xc7, 0x99, 0xdf, 0x30, 0x93,
	0x47, 0x60, 0xa3, 0x95, 0xc1, 0x51, 0x57, 0x2a, 0x1b, 0x34, 0x5a, 0x64, 0xab, 0x0e, 0xa5, 0x6a,
	0xd3, 0x12, 0x8e, 0xb8, 0x03, 0xec, 0x1c, 0x56, 0x16, 0xad, 0x68, 0x63, 0x2f, 0xf1, 0xb6, 0x01,
	0xdf, 0x0b, 0x76, 0x09, 0xc7, 0x62, 0x12, 0x4d, 0x2b, 0xca, 0x56, 0xc5, 0x3e, 0x91, 0x3f, 0x83,
	0xa5, 0x70, 0x3a, 0x1a, 0x25, 0x3f, 0x06, 0xa5, 0x2b, 0xd5, 0xdb, 0x38, 0x48, 0xbc, 0xad, 0xc7,
	0xff, 0x79, 0xe9, 0x1b, 0xac, 0x5f, 0x51, 0xc8, 0xa7, 0xa9, 0x9e, 0x27, 0x5a, 0x14, 0xf2, 0x9e,
	0x26, 0x7c, 0xbe, 0x17, 0x8b, 0x5b, 0x50, 0xbd, 0x73, 0x0b, 0x76, 0x01, 0x11, 0xe1, 0x82, 0x4a,
	0x7d, 0xee, 0x54, 0xfa, 0xe3, 0x01, 0x7b, 0xc1, 0x6e, 0x18, 0x6d, 0xd3, 0xd7, 0xcb, 0xe3, 0x0d,
	0xbb, 0x81, 0xa0, 0x1a, 0x46, 0x2a, 0x3e, 0x79, 0x38, 0xcb, 0xe8, 0xbc, 0x6c, 0xc1, 0x7c, 0x66,
	0xec, 0x0e, 0xa2, 0x4e, 0x75, 0xa8, 0xbf, 0x69, 0xe8, 0x40, 0xca, 0x61, 0x76, 0x0b, 0x6b, 0x63,
	0x51, 0x8b, 0x5a, 0xc5, 0x41, 0x12, 0x1c, 0x4a, 0x86, 0xb2, 0x31, 0x9f, 0x2c, 0x85, 0x70, 0x7e,
	0x54, 0x1c, 0x52, 0xdd, 0xc6, 0x85, 0xdc, 0xb1, 0x9c, 0xd8, 0xf3, 0xf5, 0xfb, 0x55, 0xdd, 0xd8,
	0xdd, 0x58, 0x66, 0x15, 0x76, 0xb9, 0xf8, 0x32, 0xbb, 0x1c, 0x07, 0xd5, 0x4f, 0xb2, 0xca, 0x29,
	0x5e, 0x46, 0xf4, 0x21, 0x8f, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x0c, 0xf1, 0x0d, 0xa2,
	0x01, 0x00, 0x00,
}
