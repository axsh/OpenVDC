// Code generated by go-bindata.
// sources:
// schema/v1.json
// DO NOT EDIT!

package registry

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaV1Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\xc9\x6e\xdb\x30\x10\xbd\xeb\x2b\x08\x26\xb7\xda\x56\x12\xe4\x52\xdf\x8a\x16\xbd\x06\x68\x8b\x5e\x02\xd7\xa0\xa9\xb1\xc4\x54\x5c\x3a\xa4\x9c\x18\x81\xff\xbd\xa0\x64\xd9\xb2\x24\xaa\xca\xd2\x83\x4f\xb6\x66\xe6\x3d\xbe\x59\xb8\x3c\x47\x84\x50\x91\xd0\x39\xa1\x99\x73\xc6\xce\xe3\x18\xd9\xe3\x2c\x15\x2e\x2b\x56\x85\x05\xe4\x5a\x39\x50\x6e\xc6\xb5\x8c\xd9\x93\xcd\x62\x6d\x40\x6d\x12\x1e\x4b\x66\x1d\x60\x6c\x79\x06\x92\xc5\x9b\xeb\xd9\x83\xd5\xea\x82\x4e\x3c\xe1\x65\x65\xad\x59\xe7\x71\xec\x9d\xd3\xca\x3a\xd3\x98\xc6\x09\xb2\xb5\x9b\x5e\xdd\xee\xf1\x7b\x5c\x02\x96\xa3\x30\x4e\x68\xe5\xb1\x77\x06\xd4\xcf\x2f\x9f\xc9\x37\xb0\xba\x40\x0e\xe4\x07\x48\x93\x33\x07\xe4\x7b\xc5\x5f\x82\xdc\xd6\x80\x8f\xd6\xab\x07\xe0\xae\xb2\x19\xd4\x06\xd0\x09\xb0\x74\x4e\x7c\x8e\x84\xd0\x25\xd7\x52\x82\x72\x07\x4b\x03\x6b\x1d\x0a\x95\xd2\xd2\xbc\x9b\x54\xf1\x4e\xb8\x1c\xc6\x06\x9f\x2a\x1f\xc7\xbf\x4f\xa6\x2f\xbe\x91\x4b\x69\xd7\x0a\xee\xd6\x74\x4e\xee\xf7\x06\x72\x80\x94\xee\x4b\x04\xef\xa5\x17\x71\x4d\x6a\x63\xa5\x15\xd0\x43\xd0\x6e\x32\x1e\x99\x3f\xf1\xd7\x01\x55\x91\xe7\x0d\xe4\xfe\xdf\x22\xaa\xbf\x4a\x2e\x8a\xf0\xa7\x10\x08\xc9\x21\x9d\x7d\xa5\xdb\x65\x89\x08\x59\x54\x0d\xae\x17\x38\xf6\xb2\x4c\xae\x51\xb7\x0e\xe7\xb1\x9a\xb5\x8a\x43\x2d\x7b\x66\x23\x34\x1f\xc1\x1e\xb6\x2a\x53\xc7\x9c\xe0\x40\x15\xf2\x44\xcf\x51\x79\xc3\xb4\xe8\xe5\x33\x0c\x99\xbc\x7e\x8d\x92\x12\x79\x33\x1a\x19\x35\x7f\xeb\xc9\xf4\x03\x70\x96\xc5\xdd\xc8\xd3\xe1\x0d\x95\x57\x0a\xb5\xdc\x70\x53\x84\xd4\x08\xe5\x20\x05\xa4\x93\xa6\x33\x81\x35\x2b\x72\x9f\xc1\x75\x90\x54\x82\xd4\xb8\x5d\xa6\xab\x77\x65\x7e\x7f\xa9\xff\x45\x66\xfe\xc4\x97\x42\xb2\xb4\xd3\xac\xc0\xa9\x46\x06\x06\x86\x0c\x0c\x0d\x19\x1a\x9c\x96\xa8\x4a\xb8\x7e\x54\xb9\x66\xc9\xb2\xc0\x7c\x04\xd7\xa4\xed\x5f\x6b\x94\xcc\xab\xa0\x05\x8a\xe1\xa5\x78\x06\xfc\xb7\x2d\xe4\xb2\x67\x68\x5f\xac\xbb\x26\x7b\x31\x4f\x14\xe0\x2c\xfb\x8a\x6b\xc6\xfb\xaa\x5d\x33\x32\x44\xb6\x6d\x15\x81\x0a\x07\xb2\x8b\x19\xee\x2d\xf9\x47\x7f\x49\x60\x73\x87\x72\x6c\x73\x93\xe0\x41\x70\xf0\x6e\xc0\x65\xbd\xb8\xfa\x24\x0e\xf8\x40\x1a\xd7\xae\xc1\x91\x34\x67\x2a\xe4\x93\x8c\x0f\xb9\x4d\xb6\xb5\xb4\xc7\xb5\xe8\xd8\x76\x5d\x06\x4f\xce\x92\x04\xdf\x52\x2e\xc3\x9c\x03\x2c\x5f\x57\xbf\xee\xaf\xa6\x1f\xd9\x74\xfd\x69\xfa\x75\xf1\x7c\xb3\x3b\x7e\xcd\x17\x1f\x2e\xbb\x22\xfb\x04\x09\xb3\xb9\x7d\xab\xa2\xe3\xe6\xf2\x6c\xe3\xd6\x5d\xa1\x48\x52\xa0\x64\xdc\xb2\x5d\xca\x68\xe8\x3b\xbc\x7b\x7a\x2f\x42\xd2\x39\x61\xfa\xaf\x9f\xde\x9b\xb6\x7c\x31\x9d\xeb\x55\x7b\xfa\xdc\x3b\xe7\xbb\xf6\xb4\x37\xfe\xa5\x1a\xed\xa2\xbf\x01\x00\x00\xff\xff\x8c\xea\xbb\x17\x1b\x0d\x00\x00")

func schemaV1JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaV1Json,
		"schema/v1.json",
	)
}

func schemaV1Json() (*asset, error) {
	bytes, err := schemaV1JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/v1.json", size: 3355, mode: os.FileMode(420), modTime: time.Unix(1480913479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/v1.json": schemaV1Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"v1.json": &bintree{schemaV1Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

