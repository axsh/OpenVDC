// Code generated by go-bindata.
// sources:
// ../schema/none.json
// ../schema/v1.json
// ../schema/vm/lxc.json
// ../schema/vm/null.json
// DO NOT EDIT!

package registry

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaNoneJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xb1\x4e\x03\x31\x0c\x86\xf7\x3c\x85\x15\x18\x40\x6a\x39\x40\x4c\x59\x41\xac\x48\x08\xb1\xa0\x0a\x85\x9c\xb9\xa6\x6a\xec\xe0\xf8\x86\xaa\xea\xbb\xa3\x5c\xe0\x54\x26\x3a\x64\xc8\xe7\xef\xf7\xef\xbd\x01\xb0\xe7\x25\xac\x31\x79\xeb\xc0\xae\x55\xb3\xeb\xba\x4d\x61\x5a\x36\x7a\xc5\x32\x74\xbd\xf8\x4f\x5d\x5e\xdf\x75\x8d\x9d\xd9\x45\xcd\xf5\x58\x82\xc4\xac\x91\xa9\x66\x9f\x32\xd2\xeb\xc3\x3d\x3c\x63\xe1\x51\x02\xc2\x0b\xa6\xbc\xf5\x8a\x0e\x88\x09\xe1\xe2\x91\x05\x14\x8b\x46\x1a\x80\x69\xbb\xbb\x6c\x6b\x74\x97\xb1\xe6\xf9\x63\x83\x41\x1b\x13\xfc\x1a\xa3\x60\x6f\x1d\xbc\x19\x80\x5f\xcb\x00\xac\xa6\x79\x16\xce\x28\x1a\xb1\x58\x07\xfb\x66\xbc\x07\x4e\x09\x49\x67\x72\xb4\xbb\xa8\x44\x1a\xec\x84\x0f\x0b\x73\x3c\x9b\x5d\xa4\x31\xcd\x7d\x13\xa9\x67\xdb\x9f\xef\xea\x4f\x36\x7b\xf1\xe9\xe6\xd4\xa6\xc9\xbe\xfd\xd7\x36\xf5\x1d\xcc\x77\x00\x00\x00\xff\xff\x57\x3a\x39\x38\x94\x01\x00\x00")

func schemaNoneJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaNoneJson,
		"schema/none.json",
	)
}

func schemaNoneJson() (*asset, error) {
	bytes, err := schemaNoneJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/none.json", size: 404, mode: os.FileMode(420), modTime: time.Unix(1495216653, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaV1Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x41\x4b\xc3\x40\x10\x85\xef\xf9\x15\xcb\xea\xb1\xcd\x2a\x78\xca\x55\xef\x05\x15\x2f\x52\x24\xdd\x4c\x9b\x2d\xd9\x99\x75\x76\x52\x2b\x25\xff\x5d\x36\x49\x43\x44\xc1\x62\x4e\xbb\x6f\xde\xf7\x36\x8f\x39\x65\x4a\x69\x57\xe9\x42\xe9\x5a\x24\xc4\xc2\x18\x2e\x3f\xf2\x9d\x93\xba\xdd\xb4\x11\xd8\x12\x0a\xa0\xe4\x96\xbc\x29\x8f\xb1\x36\x14\x00\x0f\x95\x35\xbe\x8c\x02\x6c\xa2\xad\xc1\x97\xe6\x70\x9b\xef\x23\xe1\x95\x5e\xa4\xc0\xeb\x41\x3d\xa7\x16\xc6\xa4\xe1\x72\x50\x73\xe2\x9d\xa9\xb8\xdc\xca\xf2\xe6\x6e\xe4\x47\xae\x82\x68\xd9\x05\x71\x84\x89\x5d\x05\xc0\x97\x87\x7b\xf5\x08\x91\x5a\xb6\xa0\x9e\xc1\x87\xa6\x14\x50\x4f\x43\x7e\x0f\xc9\x67\x80\xe4\xa6\xcd\x1e\xac\x0c\x1a\xc3\x7b\xeb\x18\x52\xaf\xd7\x4c\xa9\xe4\x72\xd2\x40\x3f\x4c\x97\x31\x47\x67\x4a\xad\x7b\x20\x30\x05\x60\x71\x10\x75\xa1\x4e\x83\xeb\xcd\x92\xf7\x80\x32\x29\xb3\xc7\xa2\xb0\xc3\x9d\xee\xe5\x6e\x31\x7f\xe2\x42\xf3\xf7\xaa\x97\xe5\x9f\xff\xfa\x17\xff\xac\x7c\xaf\x13\xc2\x6a\x3b\xb5\x4f\xdf\x69\x3a\xa5\x05\x31\xa4\xa9\xce\x0d\x12\xc2\xb8\xba\xc9\xd0\x2d\xfe\xa2\x0e\xde\x34\x47\xfb\x2f\x0e\xdb\xa6\xf9\x01\x8e\xa7\x75\x76\xbe\x75\x59\x97\x7d\x05\x00\x00\xff\xff\x60\x1a\x39\xfd\x9c\x02\x00\x00")

func schemaV1JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaV1Json,
		"schema/v1.json",
	)
}

func schemaV1Json() (*asset, error) {
	bytes, err := schemaV1JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/v1.json", size: 668, mode: os.FileMode(420), modTime: time.Unix(1495216653, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaVmLxcJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x6f\xdb\x3c\x0c\xbe\xfb\x57\x08\x6a\x6f\x6f\xf2\xba\x1d\x7a\x59\x6e\xc3\x86\x5d\x37\x0c\xc3\x2e\x85\x17\xc8\x32\xed\xa8\xb3\x3e\x46\x49\x59\x82\x22\xff\x7d\x50\xe2\x24\xf2\x57\x9b\x2e\x6d\xd1\x43\x80\xf8\x21\xf9\x90\x12\x1f\x51\xf6\x7d\x42\x08\xbd\xb4\x7c\x01\x92\xd1\x19\xa1\x0b\xe7\xcc\x2c\x4d\xef\xac\x56\xd3\x1d\xfa\xbf\xc6\x2a\x2d\x90\x95\x6e\x7a\x75\x93\xee\xb0\x0b\x3a\x09\x71\x05\x58\x8e\xc2\x38\xa1\x55\x88\xfd\x62\x40\xfd\xf8\xf4\x91\x7c\x03\xab\x3d\x72\x20\xdf\x41\x9a\x9a\x39\x98\x91\xa5\x4c\xeb\x15\xdf\x45\xb9\xb5\x81\xe0\xae\xf3\x3b\xe0\x6e\x87\x21\xfc\xf6\x02\xa1\xa0\x33\x72\x9b\x10\xb2\xf7\x4a\x08\xc9\xb6\x76\x83\xda\x00\x3a\x01\x96\xce\xc8\xfd\xce\x63\xce\xb5\x94\xa0\xdc\x01\x89\xb8\xad\x43\xa1\x2a\xba\x85\x37\x93\x24\xb6\x1d\x7c\x41\x79\x79\xc8\xb7\x45\x9a\x2a\x1b\x20\x6b\x45\x4b\xa1\xe6\x4b\x6e\xfc\x50\x36\xa1\x1c\x54\x80\x74\xb2\x37\x14\x50\x32\x5f\x87\xca\xae\x7b\x24\x12\xa4\xc6\xf5\xbc\xca\xcf\x62\x3a\xbf\x94\x67\x29\x23\x38\x62\xc9\x78\xd4\x97\x88\x86\x21\xb2\xf5\x91\x44\x38\x90\xb1\xdf\xb0\x16\x1a\x4b\x4f\x11\x71\xc4\x01\xc8\xa2\x88\x01\x8d\xb4\xb3\xc4\x58\x5f\x2b\x93\xb6\xb5\xa7\x8e\xbd\x46\xc0\x2d\x3a\xbe\x84\x50\xa5\x15\xf4\x51\x90\xc6\xad\xfb\xf0\xb2\x66\xaa\x8f\x4a\xc6\x87\x0d\x66\xb1\xb6\xb4\x05\x66\xd1\xd3\x26\xf6\x0f\x24\xac\x28\xf0\xa9\x8b\x35\xcc\x39\xc0\xed\x21\xfe\x79\x7b\x35\x7d\xcf\xa6\xe5\x87\xe9\xe7\xec\xfe\xdd\xe6\xf8\x34\xcb\xfe\xbb\xa4\xa3\x89\x85\x59\xde\xfc\x4b\xe6\x52\xa3\x64\x6e\xab\x39\xb3\xbc\x19\xe7\xcf\x51\x14\xd5\xe3\x4d\x8c\xe3\x93\xee\xbf\x4d\x4b\xba\xf5\x8a\xcf\x5d\x33\xa0\x86\xc4\xdb\x91\x64\x38\x02\x42\x89\x30\xeb\x3a\x1a\xce\x99\x15\x83\x54\x0f\xd1\x91\x07\x15\x3b\x3c\xdd\x4e\x58\x74\x67\xdb\xb6\xe7\xa8\x06\x66\xfb\x3b\xf7\x44\x1a\x86\x7c\x71\x3e\x47\xd5\x5f\xe8\x63\x1c\x0f\x77\xf4\xd0\x1d\xc9\x56\x5f\xe3\xdd\xbc\x3e\x5a\x84\x1a\xb1\x8c\x6c\x3f\x2d\xf4\x1f\x55\x6b\x56\x3c\xa5\x95\x23\xe3\x2a\xb0\x09\xeb\x50\x77\x75\xbf\x6f\x4b\x84\x66\xaf\xae\x8d\xa6\xb4\xb7\xa1\xb0\x25\x43\xc1\xce\x5f\xd3\x1b\x13\x6a\x74\x3f\x85\xca\x6a\xa1\xfc\xaa\xab\xab\x4b\x84\x32\xd0\x5e\xa4\xc7\xa6\xa7\xf1\x78\x4a\xa3\xd9\x93\x76\xc6\xcd\x60\xaa\xdc\xdb\x75\xae\x5f\x21\x11\x07\xe5\x74\xef\xbe\x7d\xfe\x3c\x05\xe4\x82\xa9\x97\xcf\x53\x42\xa1\x91\xbd\x7c\x1e\x9f\x7b\xe5\xfc\x0b\xe5\x19\xbd\xee\x84\x64\xd5\x49\x77\xdd\xd8\x64\x1c\x19\x3c\xa3\x07\xa3\xd5\xc2\x66\xaa\xce\x3d\xd6\x8f\xc4\xb7\x06\xe1\xf1\x0d\xc1\xa3\x18\x51\xe1\x02\xf8\x2f\xeb\xe5\x7c\xe0\x45\xef\xa4\xda\xf6\x04\x27\xc7\xf6\xee\x9f\xc1\xf9\xdf\x5e\x73\x03\x37\x9f\x15\x49\xf8\x6d\x92\xbf\x01\x00\x00\xff\xff\xe0\xea\x27\x53\x80\x0d\x00\x00")

func schemaVmLxcJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaVmLxcJson,
		"schema/vm/lxc.json",
	)
}

func schemaVmLxcJson() (*asset, error) {
	bytes, err := schemaVmLxcJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/vm/lxc.json", size: 3456, mode: os.FileMode(420), modTime: time.Unix(1495722445, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaVmNullJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x41\x4b\xc3\x40\x10\x85\xef\xf9\x15\xc3\xea\x41\x21\x35\x0a\x9e\x72\x55\xbc\x0a\x22\x5e\xa4\x84\xed\x66\x9a\x6e\xc9\xee\xac\xb3\x93\x42\x28\xfd\xef\x92\x6e\x1b\x52\xac\x5e\xea\x21\x87\x7c\x6f\xde\x9b\xb7\xbb\xdb\x0c\x40\x5d\x47\xb3\x42\xa7\x55\x09\x6a\x25\x12\xca\xa2\x58\x47\xf2\xb3\x44\xef\x88\x9b\xa2\x66\xbd\x94\xd9\xfd\x63\x91\xd8\x95\xca\x07\x5f\x8d\xd1\xb0\x0d\x62\xc9\x0f\xde\xd7\x80\xfe\xe3\xf9\x09\xde\x30\x52\xc7\x06\xe1\x1d\x5d\x68\xb5\x60\x09\x1b\x57\xf8\xae\x6d\xe1\xe6\x85\x18\x04\xa3\x58\xdf\x00\xf9\xb6\xbf\x4d\x49\xd2\x07\x1c\x22\x68\xb1\x46\x23\x89\x31\x7e\x75\x96\xb1\x56\x25\x7c\x66\x00\xc7\xa9\x0c\x60\xbe\xd7\x03\x53\x40\x16\x8b\x51\x95\xb0\x4d\x13\x95\x21\xe7\xd0\xcb\x48\x26\xd9\x51\xd8\xfa\x46\xed\xf1\x2e\xcf\xa6\xda\x38\x8b\xbe\x73\xe3\xbe\x3d\x39\x34\x57\x07\x32\x3f\xb1\x3b\xeb\xab\x8d\x09\xdd\xb9\x75\xd6\x0b\x36\xc8\x2a\x3f\x0a\x35\x2e\x75\xd7\x0e\xd5\x1e\x7e\x84\x38\x74\xc4\x7d\xd5\x2c\x2e\x4a\xba\xbc\xca\xbf\xd4\x30\xac\xe3\xaa\x8a\xa2\x1b\xfc\xe3\x1d\xf2\xdf\xef\xdc\x93\xc7\x51\x87\xc1\xa1\x59\x4e\x01\x85\xe9\xbf\x61\xd4\x72\x62\xa9\x31\x0a\x53\x3f\x45\x8c\x0b\x22\x19\x1f\xf2\xcc\x31\xd2\xe2\x74\x96\x6c\xf8\x76\xd9\x77\x00\x00\x00\xff\xff\xe5\x17\x5f\xd6\x20\x03\x00\x00")

func schemaVmNullJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaVmNullJson,
		"schema/vm/null.json",
	)
}

func schemaVmNullJson() (*asset, error) {
	bytes, err := schemaVmNullJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/vm/null.json", size: 800, mode: os.FileMode(420), modTime: time.Unix(1495857407, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/none.json": schemaNoneJson,
	"schema/v1.json": schemaV1Json,
	"schema/vm/lxc.json": schemaVmLxcJson,
	"schema/vm/null.json": schemaVmNullJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"none.json": &bintree{schemaNoneJson, map[string]*bintree{}},
		"v1.json": &bintree{schemaV1Json, map[string]*bintree{}},
		"vm": &bintree{nil, map[string]*bintree{
			"lxc.json": &bintree{schemaVmLxcJson, map[string]*bintree{}},
			"null.json": &bintree{schemaVmNullJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
